package online.mafoverlay

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.ParseMode
import io.github.mralex1810.gomafia.GomafiaRestClient

class NotificationService(
    private val telegramBot: Bot,
    private val playerRepository: PlayerRepository,
    private val gomafiaClient: GomafiaRestClient,
    private val tournamentRepository: TournamentRepository,
    private val tournamentService: TournamentService
) {
    suspend fun notifyPlayersAboutTour(tournamentId: Int, tourNumber: Int) {
        val tournament = tournamentRepository.getTournament(tournamentId)
            ?: return

        val tour = tournament.tours.find { it.number == tourNumber }
            ?: return

        val startTime = tour.startTime ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤
        val tableLocations = tour.tables.associate { it.number to (it.location ?: "") }

        val games = gomafiaClient.getTournament(tournamentId).games

        for (gomafiaPlayerId in games.flatMap { it.table }.mapNotNull { it.id }.distinct()) {
            try {
                val playerDto = tournamentService.getPlayerTable(games, tourNumber, gomafiaPlayerId)

                if (playerDto != null) {
                    val message = buildString {
                        append("üé≤ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–∞ $tourNumber* üé≤\n\n")
                        append("–¢—É—Ä–Ω–∏—Ä: ${tournament.name}\n")
                        append("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: $startTime\n")
                        append("–í–∞—à —Å—Ç–æ–ª: ${playerDto.first}\n")
                        append("–°–ª–æ—Ç: ${playerDto.second}\n")

                        val location = tableLocations[playerDto.first]
                        if (!location.isNullOrBlank()) {
                            append("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $location\n")
                        }

                        append("\n–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üÉè")
                    }
                    for (player in playerRepository.getPlayersByGomafiaId(gomafiaPlayerId)) {
                        telegramBot.sendMessage(
                            ChatId.fromId(player.telegramId),
                            message,
                            parseMode = ParseMode.MARKDOWN
                        )
                    }
                }
            } catch (e: Exception) {
                println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É ${gomafiaPlayerId}: ${e.message}")
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç—É—Ä–Ω–∏—Ä–∞
     */
    suspend fun broadcastMessage(tournamentId: Int, message: String) {
        val tournament = tournamentRepository.getTournament(tournamentId)
            ?: return

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        val players = playerRepository.getAllPlayers()

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        val formattedMessage = """
            üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"*
            
            $message
        """.trimIndent()

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        for (player in players) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                val isParticipant = checkIfPlayerIsParticipant(tournamentId, player.gomafiaId)

                if (isParticipant) {
                    telegramBot.sendMessage(ChatId.fromId(player.telegramId), formattedMessage)
                }
            } catch (e: Exception) {
                println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É ${player.gomafiaId}: ${e.message}")
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ç—É—Ä–Ω–∏—Ä–∞
     */
    private fun checkIfPlayerIsParticipant(tournamentId: Int, playerId: Int): Boolean {
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –æ–Ω —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω —Å—Ç–æ–ª –≤ –ª—é–±–æ–º —Ç—É—Ä–µ

            // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            return true
        } catch (e: Exception) {
            println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–∏—è –∏–≥—Ä–æ–∫–∞ $playerId –≤ —Ç—É—Ä–Ω–∏—Ä–µ $tournamentId: ${e.message}")
            return false
        }
    }
}

